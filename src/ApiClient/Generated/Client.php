<?php

declare(strict_types=1);

/*
 * NOTE: This file is auto generated.
 *
 * DO NOT EDIT MANUALLY.
 */

namespace CyberSpectrum\PhpTransifex\ApiClient\Generated;

use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteContextScreenshotByContextScreenshotId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteContextScreenshotMapByContextScreenshotMapId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteProjectByProjectId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteProjectsByProjectIdRelationshipsLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteProjectsByProjectIdRelationshipsMaintainer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteProjectWebhookByWebhookId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteResourceByResourceId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteResourceString;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteResourceStringByResourceStringId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteResourceStringCommentByCommentId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteTeamByTeamId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteTeamMembershipByTeamMembershipId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\DeleteTeamsByTeamIdRelationshipsManager;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetByResourceAsyncMergeId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetContextScreenshot;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetContextScreenshotByContextScreenshotId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetContextScreenshotMap;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetContextScreenshotMapByContextScreenshotMapId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetI18nFormat;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetLanguageByLanguageId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetOrganization;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetOrganizationByOrganizationId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProject;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectByProjectId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectsByProjectIdLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectsByProjectIdMaintainer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectsByProjectIdRelationshipsLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectsByProjectIdRelationshipsMaintainer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectsByProjectIdRelationshipsTeam;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectWebhook;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetProjectWebhookByWebhookId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResource;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceByResourceId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceLanguageStat;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceLanguageStatByResourceLanguageStatsId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceString;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringByResourceStringId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringComment;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringCommentByCommentId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringsAsyncUploadByResourceStringsAsyncUploadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceStringsRevision;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceTranslation;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceTranslationByResourceTranslationId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeam;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamByTeamId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamMembership;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamMembershipByTeamMembershipId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamsByTeamIdManager;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTeamsByTeamIdRelationshipsManager;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTmxAsyncDownloadByTmxAsyncDownloadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetTmxAsyncUploadByTmxAsyncUploadId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\GetUserByUserId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchContextScreenshotByContextScreenshotId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchProjectByProjectId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchProjectsByProjectIdRelationshipsLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchProjectsByProjectIdRelationshipsMaintainer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchProjectsByProjectIdRelationshipsTeam;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchProjectWebhookByWebhookId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceByResourceId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceString;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceStringByResourceStringId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceStringCommentByCommentId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceTranslation;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchResourceTranslationByResourceTranslationId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchTeamByTeamId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchTeamMembershipByTeamMembershipId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PatchTeamsByTeamIdRelationshipsManager;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostContextScreenshotByProjectId;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostContextScreenshotMap;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostOrganizationActivityReportsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostProject;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostProjectActivityReportsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostProjectsByProjectIdRelationshipsLanguage;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostProjectsByProjectIdRelationshipsMaintainer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostProjectWebhook;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResource;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceActivityReportsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceAsyncMerge;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceString;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceStringComment;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceStringsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceStringsAsyncUpload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceTranslationsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostResourceTranslationsAsyncUpload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTeam;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTeamActivityReportsAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTeamMembership;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTeamsByTeamIdRelationshipsManager;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTmxAsyncDownload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Endpoint\PostTmxAsyncUpload;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotByContextScreenshotIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotByContextScreenshotIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotByContextScreenshotIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotByContextScreenshotIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotMapByContextScreenshotMapIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotMapByContextScreenshotMapIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotMapByContextScreenshotMapIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteContextScreenshotMapByContextScreenshotMapIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectByProjectIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectByProjectIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectByProjectIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectByProjectIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsLanguageNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectsByProjectIdRelationshipsMaintainerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectWebhookByWebhookIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectWebhookByWebhookIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteProjectWebhookByWebhookIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceByResourceIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceByResourceIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceByResourceIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceByResourceIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringByResourceStringIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringCommentByCommentIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringCommentByCommentIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringCommentByCommentIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringCommentByCommentIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteResourceStringTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamByTeamIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamByTeamIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamByTeamIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamByTeamIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamByTeamIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamMembershipByTeamMembershipIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\DeleteTeamsByTeamIdRelationshipsManagerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetByResourceAsyncMergeIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetByResourceAsyncMergeIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetByResourceAsyncMergeIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetByResourceAsyncMergeIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetByResourceAsyncMergeIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotByContextScreenshotIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotByContextScreenshotIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotByContextScreenshotIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotByContextScreenshotIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapByContextScreenshotMapIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapByContextScreenshotMapIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapByContextScreenshotMapIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapByContextScreenshotMapIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotMapUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetContextScreenshotUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetI18nFormatForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetI18nFormatInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetI18nFormatNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetI18nFormatUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageByLanguageIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageByLanguageIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageByLanguageIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageByLanguageIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationByOrganizationIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationByOrganizationIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationByOrganizationIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetOrganizationUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectByProjectIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectByProjectIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectByProjectIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectByProjectIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectByProjectIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdMaintainerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdMaintainerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdMaintainerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdMaintainerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdMaintainerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsLanguageBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsLanguageNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsMaintainerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsTeamBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsTeamForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsTeamInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsTeamNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectsByProjectIdRelationshipsTeamUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookByWebhookIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookByWebhookIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookByWebhookIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetProjectWebhookUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceByResourceIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceByResourceIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceByResourceIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceByResourceIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatByResourceLanguageStatsIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatByResourceLanguageStatsIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatByResourceLanguageStatsIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatByResourceLanguageStatsIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatByResourceLanguageStatsIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceLanguageStatUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringByResourceStringIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringByResourceStringIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringByResourceStringIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringByResourceStringIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringByResourceStringIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentByCommentIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentByCommentIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentByCommentIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringCommentUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringsRevisionUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceStringUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationByResourceTranslationIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationByResourceTranslationIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationByResourceTranslationIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationByResourceTranslationIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationByResourceTranslationIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceTranslationUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetResourceUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamByTeamIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamByTeamIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamByTeamIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamByTeamIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamByTeamIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipByTeamMembershipIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipByTeamMembershipIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipByTeamMembershipIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipByTeamMembershipIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipByTeamMembershipIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamMembershipUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamsByTeamIdRelationshipsManagerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamsByTeamIdRelationshipsManagerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamsByTeamIdRelationshipsManagerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamsByTeamIdRelationshipsManagerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamsByTeamIdRelationshipsManagerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTeamUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncDownloadByTmxAsyncDownloadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncDownloadByTmxAsyncDownloadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncDownloadByTmxAsyncDownloadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncDownloadByTmxAsyncDownloadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncUploadByTmxAsyncUploadIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncUploadByTmxAsyncUploadIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncUploadByTmxAsyncUploadIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetTmxAsyncUploadByTmxAsyncUploadIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetUserByUserIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetUserByUserIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\GetUserByUserIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchContextScreenshotByContextScreenshotIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchContextScreenshotByContextScreenshotIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchContextScreenshotByContextScreenshotIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchContextScreenshotByContextScreenshotIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchContextScreenshotByContextScreenshotIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectByProjectIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsLanguageBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsLanguageNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsMaintainerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsTeamBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsTeamForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsTeamInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsTeamNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectsByProjectIdRelationshipsTeamUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectWebhookByWebhookIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectWebhookByWebhookIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectWebhookByWebhookIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectWebhookByWebhookIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchProjectWebhookByWebhookIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceByResourceIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringByResourceStringIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringCommentByCommentIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceStringUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationByResourceTranslationIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchResourceTranslationUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamByTeamIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamMembershipByTeamMembershipIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PatchTeamsByTeamIdRelationshipsManagerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotByProjectIdBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotByProjectIdConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotByProjectIdInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotByProjectIdNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotByProjectIdUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotMapBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotMapConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotMapInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotMapNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostContextScreenshotMapUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostOrganizationActivityReportsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectActivityReportsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsLanguageUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectsByProjectIdRelationshipsMaintainerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectWebhookBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectWebhookConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectWebhookInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectWebhookNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostProjectWebhookUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceActivityReportsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceAsyncMergeUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringCommentUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringsAsyncUploadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceStringUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadTooManyRequestsException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceTranslationsAsyncUploadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostResourceUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamActivityReportsAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamMembershipUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerPaymentRequiredException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTeamsByTeamIdRelationshipsManagerUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncDownloadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadBadRequestException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadConflictException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadForbiddenException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadInternalServerErrorException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadNotFoundException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\PostTmxAsyncUploadUnauthorizedException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Exception\UnexpectedStatusCodeException;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ContextScreenshotsContextIdResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\DeleteResourceStringsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetContextScreenshotMaps200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetContextScreenshotMapsContextScreenshotMapId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetContextScreenshots200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetI18nFormats200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetLanguages200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetLanguagesLanguageId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetOrganizations200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetOrganizationsOrganizationId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjects200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectsProjectIdLanguages200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectsProjectIdMaintainers200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectsProjectIdRelationshipsLanguages200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectsProjectIdRelationshipsMaintainers200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectsProjectIdRelationshipsTeam200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetProjectWebhooks200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceLanguageStats200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceLanguageStatsResourceLanguageStatsId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResources200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceStringComments200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceStringCommentsCommentId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceStrings200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceStringsRevisions200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceTranslations200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetResourceTranslationsResourceTranslationId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTeamMemberships200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTeamMembershipsTeamMembershipId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTeams200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTeamsTeamIdManagers200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTeamsTeamIdRelationshipsManagers200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetTmxAsyncUploadsTmxAsyncUploadId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\GetUsersUserId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\IdRelationshipsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\OrganizationActivityReportsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchContextScreenshotsContextScreenshotIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectsProjectId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectsProjectIdRelationshipsLanguagesRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectsProjectIdRelationshipsTeamRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectsProjectIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectWebhooksWebhookId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchProjectWebhooksWebhookIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourcesResourceIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceStringCommentsCommentId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceStringCommentsCommentIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceStringsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceStringsResourceStringIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceTranslationsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceTranslationsResourceTranslationId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchResourceTranslationsResourceTranslationIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchTeamMembershipsTeamMembershipIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchTeamsTeamId200Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PatchTeamsTeamIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostContextScreenshotMaps201Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostContextScreenshotMapsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostContextScreenshotsProjectIdRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostOrganizationActivityReportsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostProjectActivityReportsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostProjectsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostProjectWebhooksRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceActivityReportsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceAsyncMergesRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourcesRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStringComments201Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStringCommentsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStrings201Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStringsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStringsAsyncUploadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceStringsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceTranslationsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostResourceTranslationsAsyncUploadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTeamActivityReportsAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTeamMembershipsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTeamsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTmxAsyncDownloadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTmxAsyncUploads202Response;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\PostTmxAsyncUploadsRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ProjectActivityReportsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ProjectsProjectIdRelationshipsLanguagesRequestBody;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ProjectsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ProjectWebhooksResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceActivityReportsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceAsyncMergesResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourcesResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourcesResponse1;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceStringsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceStringsAsyncUploadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceStringsResourceStringIdResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceTranslationsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\ResourceTranslationsAsyncUploadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\TeamActivityReportsAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\TeamMembershipsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\TeamsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Model\TmxAsyncDownloadsResponse;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Normalizer\JaneObjectNormalizer;
use CyberSpectrum\PhpTransifex\ApiClient\Generated\Runtime\Client\Client as ClientBase;
use Http\Client\Common\Plugin\AddHostPlugin;
use Http\Client\Common\PluginClient;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Message\ResponseInterface;
use Symfony\Component\Serializer\Encoder\JsonDecode;
use Symfony\Component\Serializer\Encoder\JsonEncode;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Serializer;

class Client extends ClientBase
{
    /**
     * Get the context screenshots maps for a project. You can further narrow down the list using the available filters.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[project] Filter results by a project
     *     @var string $filter[resource] Filter results by a resource
     *     @var string $filter[resource_string]
     *     @var string $filter[context_screenshot] Retrieve maps related to a specific context screenshot
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetContextScreenshotMaps200Response|ResponseInterface
     *
     * @throws GetContextScreenshotMapBadRequestException
     * @throws GetContextScreenshotMapUnauthorizedException
     * @throws GetContextScreenshotMapNotFoundException
     * @throws GetContextScreenshotMapConflictException
     * @throws GetContextScreenshotMapInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getContextScreenshotMap(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetContextScreenshotMap($queryParameters), $fetch);
    }

    /**
     * Upload screenshot map.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PostContextScreenshotMaps201Response|ResponseInterface
     *
     * @throws PostContextScreenshotMapBadRequestException
     * @throws PostContextScreenshotMapUnauthorizedException
     * @throws PostContextScreenshotMapNotFoundException
     * @throws PostContextScreenshotMapConflictException
     * @throws PostContextScreenshotMapInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postContextScreenshotMap(PostContextScreenshotMapsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostContextScreenshotMap($requestBody), $fetch);
    }

    /**
     * Delete a context screenshot map.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteContextScreenshotMapByContextScreenshotMapIdUnauthorizedException
     * @throws DeleteContextScreenshotMapByContextScreenshotMapIdNotFoundException
     * @throws DeleteContextScreenshotMapByContextScreenshotMapIdConflictException
     * @throws DeleteContextScreenshotMapByContextScreenshotMapIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteContextScreenshotMapByContextScreenshotMapId(string $contextScreenshotMapId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteContextScreenshotMapByContextScreenshotMapId($contextScreenshotMapId), $fetch);
    }

    /**
     * Get details for a context screenshot map.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetContextScreenshotMapsContextScreenshotMapId200Response|ResponseInterface
     *
     * @throws GetContextScreenshotMapByContextScreenshotMapIdUnauthorizedException
     * @throws GetContextScreenshotMapByContextScreenshotMapIdNotFoundException
     * @throws GetContextScreenshotMapByContextScreenshotMapIdConflictException
     * @throws GetContextScreenshotMapByContextScreenshotMapIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getContextScreenshotMapByContextScreenshotMapId(string $contextScreenshotMapId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetContextScreenshotMapByContextScreenshotMapId($contextScreenshotMapId), $fetch);
    }

    /**
     * Get the context screenshots for a project.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[project] Filter results by a project
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetContextScreenshots200Response|ResponseInterface
     *
     * @throws GetContextScreenshotBadRequestException
     * @throws GetContextScreenshotUnauthorizedException
     * @throws GetContextScreenshotNotFoundException
     * @throws GetContextScreenshotConflictException
     * @throws GetContextScreenshotInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getContextScreenshot(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetContextScreenshot($queryParameters), $fetch);
    }

    /**
     * Delete a project context screenshot.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteContextScreenshotByContextScreenshotIdUnauthorizedException
     * @throws DeleteContextScreenshotByContextScreenshotIdNotFoundException
     * @throws DeleteContextScreenshotByContextScreenshotIdConflictException
     * @throws DeleteContextScreenshotByContextScreenshotIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteContextScreenshotByContextScreenshotId(string $contextScreenshotId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteContextScreenshotByContextScreenshotId($contextScreenshotId), $fetch);
    }

    /**
     * Get details for a context screenshot.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ContextScreenshotsContextIdResponse|ResponseInterface
     *
     * @throws GetContextScreenshotByContextScreenshotIdUnauthorizedException
     * @throws GetContextScreenshotByContextScreenshotIdNotFoundException
     * @throws GetContextScreenshotByContextScreenshotIdConflictException
     * @throws GetContextScreenshotByContextScreenshotIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getContextScreenshotByContextScreenshotId(string $contextScreenshotId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetContextScreenshotByContextScreenshotId($contextScreenshotId), $fetch);
    }

    /**
     * Update details of a context screenshot.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ContextScreenshotsContextIdResponse|ResponseInterface
     *
     * @throws PatchContextScreenshotByContextScreenshotIdBadRequestException
     * @throws PatchContextScreenshotByContextScreenshotIdUnauthorizedException
     * @throws PatchContextScreenshotByContextScreenshotIdNotFoundException
     * @throws PatchContextScreenshotByContextScreenshotIdConflictException
     * @throws PatchContextScreenshotByContextScreenshotIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchContextScreenshotByContextScreenshotId(string $contextScreenshotId, PatchContextScreenshotsContextScreenshotIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchContextScreenshotByContextScreenshotId($contextScreenshotId, $requestBody), $fetch);
    }

    /**
     * Upload screenshot.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ContextScreenshotsContextIdResponse|ResponseInterface
     *
     * @throws PostContextScreenshotByProjectIdBadRequestException
     * @throws PostContextScreenshotByProjectIdUnauthorizedException
     * @throws PostContextScreenshotByProjectIdNotFoundException
     * @throws PostContextScreenshotByProjectIdConflictException
     * @throws PostContextScreenshotByProjectIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postContextScreenshotByProjectId(string $projectId, PostContextScreenshotsProjectIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostContextScreenshotByProjectId($projectId, $requestBody), $fetch);
    }

    /**
     * Get information for all the supported i18n formats.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $filter[name] Get specific i18n format by name
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetI18nFormats200Response|ResponseInterface
     *
     * @throws GetI18nFormatUnauthorizedException
     * @throws GetI18nFormatForbiddenException
     * @throws GetI18nFormatNotFoundException
     * @throws GetI18nFormatInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getI18nFormat(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetI18nFormat($queryParameters), $fetch);
    }

    /**
     * Get information for all the supported languages.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[code] The code of the language to get details
     *     @var string $filter[code][any] A list of codes of the languages to get details. This will fetch any available.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetLanguages200Response|ResponseInterface
     *
     * @throws GetLanguageUnauthorizedException
     * @throws GetLanguageForbiddenException
     * @throws GetLanguageTooManyRequestsException
     * @throws GetLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getLanguage(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetLanguage($queryParameters), $fetch);
    }

    /**
     * Get information for a specific supported language.
     *
     * @param string $languageId format of the language id should be `l:language_code`
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetLanguagesLanguageId200Response|ResponseInterface
     *
     * @throws GetLanguageByLanguageIdUnauthorizedException
     * @throws GetLanguageByLanguageIdForbiddenException
     * @throws GetLanguageByLanguageIdNotFoundException
     * @throws GetLanguageByLanguageIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getLanguageByLanguageId(string $languageId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetLanguageByLanguageId($languageId), $fetch);
    }

    /**
     * The response represents the organization activity report file download job.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return OrganizationActivityReportsAsyncDownloadsResponse|ResponseInterface
     *
     * @throws PostOrganizationActivityReportsAsyncDownloadBadRequestException
     * @throws PostOrganizationActivityReportsAsyncDownloadUnauthorizedException
     * @throws PostOrganizationActivityReportsAsyncDownloadForbiddenException
     * @throws PostOrganizationActivityReportsAsyncDownloadNotFoundException
     * @throws PostOrganizationActivityReportsAsyncDownloadConflictException
     * @throws PostOrganizationActivityReportsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postOrganizationActivityReportsAsyncDownload(PostOrganizationActivityReportsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostOrganizationActivityReportsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an organization.
     *
     * @param string $organizationActivityReportsAsyncDownloadId Format of the organization_activity_reports_async_download_id should be
     * @param string $fetch                                      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return OrganizationActivityReportsAsyncDownloadsResponse|ResponseInterface|null
     *
     * @throws GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdUnauthorizedException
     * @throws GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdForbiddenException
     * @throws GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdNotFoundException
     * @throws GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadId(string $organizationActivityReportsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetOrganizationActivityReportsAsyncDownloadByOrganizationActivityReportsAsyncDownloadId($organizationActivityReportsAsyncDownloadId), $fetch);
    }

    /**
     * Get a list of all the Organizations the user belongs to.
     *
     * @param array $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[slug] The slug of the organization to get details
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetOrganizations200Response|ResponseInterface
     *
     * @throws GetOrganizationUnauthorizedException
     * @throws GetOrganizationInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getOrganization(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetOrganization($queryParameters), $fetch);
    }

    /**
     * Get the details of an Organization.
     *
     * @param string $organizationId Format of the organization id. Should be `o:organization_slug`.
     * @param string $fetch          Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetOrganizationsOrganizationId200Response|ResponseInterface
     *
     * @throws GetOrganizationByOrganizationIdUnauthorizedException
     * @throws GetOrganizationByOrganizationIdNotFoundException
     * @throws GetOrganizationByOrganizationIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getOrganizationByOrganizationId(string $organizationId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetOrganizationByOrganizationId($organizationId), $fetch);
    }

    /**
     * The response represents the project activity report download job. Check the.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectActivityReportsAsyncDownloadsResponse|ResponseInterface
     *
     * @throws PostProjectActivityReportsAsyncDownloadBadRequestException
     * @throws PostProjectActivityReportsAsyncDownloadUnauthorizedException
     * @throws PostProjectActivityReportsAsyncDownloadForbiddenException
     * @throws PostProjectActivityReportsAsyncDownloadNotFoundException
     * @throws PostProjectActivityReportsAsyncDownloadConflictException
     * @throws PostProjectActivityReportsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postProjectActivityReportsAsyncDownload(PostProjectActivityReportsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectActivityReportsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of a project activity.
     *
     * @param string $projectActivityReportsAsyncDownloadId Format of the project_activity_reports_async_download_id should be a
     * @param string $fetch                                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectActivityReportsAsyncDownloadsResponse|ResponseInterface|null
     *
     * @throws GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdUnauthorizedException
     * @throws GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdForbiddenException
     * @throws GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdNotFoundException
     * @throws GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadId(string $projectActivityReportsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectActivityReportsAsyncDownloadByProjectActivityReportsAsyncDownloadId($projectActivityReportsAsyncDownloadId), $fetch);
    }

    /**
     * Get information for all the supported project webhooks.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $filter[project] Filter results by a project
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectWebhooks200Response|ResponseInterface
     *
     * @throws GetProjectWebhookUnauthorizedException
     * @throws GetProjectWebhookForbiddenException
     * @throws GetProjectWebhookNotFoundException
     * @throws GetProjectWebhookInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectWebhook(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectWebhook($queryParameters), $fetch);
    }

    /**
     * Create a new webhook. This needs to be associated with a project.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectWebhooksResponse|ResponseInterface
     *
     * @throws PostProjectWebhookBadRequestException
     * @throws PostProjectWebhookUnauthorizedException
     * @throws PostProjectWebhookNotFoundException
     * @throws PostProjectWebhookConflictException
     * @throws PostProjectWebhookInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postProjectWebhook(PostProjectWebhooksRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectWebhook($requestBody), $fetch);
    }

    /**
     * Delete a project webhook from an organization.
     *
     * @param string $webhookId format of composite id should be `o:organization_slug:p:project_slug:w:4abfc726-6a27-4c33-9d99-e5254c8df748
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteProjectWebhookByWebhookIdUnauthorizedException
     * @throws DeleteProjectWebhookByWebhookIdNotFoundException
     * @throws DeleteProjectWebhookByWebhookIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteProjectWebhookByWebhookId(string $webhookId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteProjectWebhookByWebhookId($webhookId), $fetch);
    }

    /**
     * Get the details of the project webhook specified by the required path parameter `webhook_id`.
     *
     * @param string $webhookId format of composite id should be `o:organization_slug:p:project_slug:w:4abfc726-6a27-4c33-9d99-e5254c8df748
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectWebhooksResponse|ResponseInterface
     *
     * @throws GetProjectWebhookByWebhookIdUnauthorizedException
     * @throws GetProjectWebhookByWebhookIdNotFoundException
     * @throws GetProjectWebhookByWebhookIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectWebhookByWebhookId(string $webhookId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectWebhookByWebhookId($webhookId), $fetch);
    }

    /**
     * update a project webhook. You can for example modify its status.
     *
     * @param string $webhookId format of composite id should be `o:organization_slug:p:project_slug:w:4abfc726-6a27-4c33-9d99-e5254c8df748
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PatchProjectWebhooksWebhookId200Response|ResponseInterface
     *
     * @throws PatchProjectWebhookByWebhookIdBadRequestException
     * @throws PatchProjectWebhookByWebhookIdUnauthorizedException
     * @throws PatchProjectWebhookByWebhookIdNotFoundException
     * @throws PatchProjectWebhookByWebhookIdConflictException
     * @throws PatchProjectWebhookByWebhookIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchProjectWebhookByWebhookId(string $webhookId, PatchProjectWebhooksWebhookIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchProjectWebhookByWebhookId($webhookId, $requestBody), $fetch);
    }

    /**
     * Get the list of projects that belong to a single organization.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[slug]
     *     @var string $filter[name]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjects200Response|ResponseInterface
     *
     * @throws GetProjectBadRequestException
     * @throws GetProjectUnauthorizedException
     * @throws GetProjectForbiddenException
     * @throws GetProjectNotFoundException
     * @throws GetProjectConflictException
     * @throws GetProjectInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProject(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProject($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectsResponse|ResponseInterface
     *
     * @throws PostProjectBadRequestException
     * @throws PostProjectForbiddenException
     * @throws PostProjectNotFoundException
     * @throws PostProjectConflictException
     * @throws UnexpectedStatusCodeException
     */
    public function postProject(PostProjectsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProject($requestBody), $fetch);
    }

    /**
     * Delete a project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteProjectByProjectIdUnauthorizedException
     * @throws DeleteProjectByProjectIdForbiddenException
     * @throws DeleteProjectByProjectIdNotFoundException
     * @throws DeleteProjectByProjectIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteProjectByProjectId(string $projectId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteProjectByProjectId($projectId), $fetch);
    }

    /**
     * Get the details of a specific project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ProjectsResponse|ResponseInterface
     *
     * @throws GetProjectByProjectIdBadRequestException
     * @throws GetProjectByProjectIdUnauthorizedException
     * @throws GetProjectByProjectIdForbiddenException
     * @throws GetProjectByProjectIdNotFoundException
     * @throws GetProjectByProjectIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectByProjectId(string $projectId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectByProjectId($projectId), $fetch);
    }

    /**
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PatchProjectsProjectId200Response|ResponseInterface
     *
     * @throws PatchProjectByProjectIdBadRequestException
     * @throws PatchProjectByProjectIdUnauthorizedException
     * @throws PatchProjectByProjectIdPaymentRequiredException
     * @throws PatchProjectByProjectIdForbiddenException
     * @throws PatchProjectByProjectIdNotFoundException
     * @throws PatchProjectByProjectIdConflictException
     * @throws PatchProjectByProjectIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchProjectByProjectId(string $projectId, PatchProjectsProjectIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchProjectByProjectId($projectId, $requestBody), $fetch);
    }

    /**
     * Get a list of all target languages of a specific project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectsProjectIdLanguages200Response|ResponseInterface
     *
     * @throws GetProjectsByProjectIdLanguageBadRequestException
     * @throws GetProjectsByProjectIdLanguageUnauthorizedException
     * @throws GetProjectsByProjectIdLanguageForbiddenException
     * @throws GetProjectsByProjectIdLanguageNotFoundException
     * @throws GetProjectsByProjectIdLanguageConflictException
     * @throws GetProjectsByProjectIdLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectsByProjectIdLanguage(string $projectId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsByProjectIdLanguage($projectId), $fetch);
    }

    /**
     * Get the maintainers of a project.
     *
     * @param string $projectId       format of composite id should be `o:organization_slug:p:project_slug`
     * @param array  $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectsProjectIdMaintainers200Response|ResponseInterface
     *
     * @throws GetProjectsByProjectIdMaintainerBadRequestException
     * @throws GetProjectsByProjectIdMaintainerUnauthorizedException
     * @throws GetProjectsByProjectIdMaintainerForbiddenException
     * @throws GetProjectsByProjectIdMaintainerNotFoundException
     * @throws GetProjectsByProjectIdMaintainerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectsByProjectIdMaintainer(string $projectId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsByProjectIdMaintainer($projectId, $queryParameters), $fetch);
    }

    /**
     * Remove target language from a project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteProjectsByProjectIdRelationshipsLanguageUnauthorizedException
     * @throws DeleteProjectsByProjectIdRelationshipsLanguageForbiddenException
     * @throws DeleteProjectsByProjectIdRelationshipsLanguageNotFoundException
     * @throws DeleteProjectsByProjectIdRelationshipsLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteProjectsByProjectIdRelationshipsLanguage(string $projectId, ProjectsProjectIdRelationshipsLanguagesRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteProjectsByProjectIdRelationshipsLanguage($projectId, $requestBody), $fetch);
    }

    /**
     * @param string $projectId       format of composite id should be `o:organization_slug:p:project_slug`
     * @param array  $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectsProjectIdRelationshipsLanguages200Response|ResponseInterface
     *
     * @throws GetProjectsByProjectIdRelationshipsLanguageBadRequestException
     * @throws GetProjectsByProjectIdRelationshipsLanguageUnauthorizedException
     * @throws GetProjectsByProjectIdRelationshipsLanguageForbiddenException
     * @throws GetProjectsByProjectIdRelationshipsLanguageNotFoundException
     * @throws GetProjectsByProjectIdRelationshipsLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectsByProjectIdRelationshipsLanguage(string $projectId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsByProjectIdRelationshipsLanguage($projectId, $queryParameters), $fetch);
    }

    /**
     * Completely replace the target language of a specific project.

    _**Warning**: This is a highly destructive operation._.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PatchProjectsByProjectIdRelationshipsLanguageBadRequestException
     * @throws PatchProjectsByProjectIdRelationshipsLanguageUnauthorizedException
     * @throws PatchProjectsByProjectIdRelationshipsLanguageForbiddenException
     * @throws PatchProjectsByProjectIdRelationshipsLanguageNotFoundException
     * @throws PatchProjectsByProjectIdRelationshipsLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchProjectsByProjectIdRelationshipsLanguage(string $projectId, PatchProjectsProjectIdRelationshipsLanguagesRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PatchProjectsByProjectIdRelationshipsLanguage($projectId, $requestBody), $fetch);
    }

    /**
     * Add target language to the project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PostProjectsByProjectIdRelationshipsLanguageBadRequestException
     * @throws PostProjectsByProjectIdRelationshipsLanguageUnauthorizedException
     * @throws PostProjectsByProjectIdRelationshipsLanguageForbiddenException
     * @throws PostProjectsByProjectIdRelationshipsLanguageNotFoundException
     * @throws PostProjectsByProjectIdRelationshipsLanguageConflictException
     * @throws PostProjectsByProjectIdRelationshipsLanguageInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postProjectsByProjectIdRelationshipsLanguage(string $projectId, ProjectsProjectIdRelationshipsLanguagesRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PostProjectsByProjectIdRelationshipsLanguage($projectId, $requestBody), $fetch);
    }

    /**
     * Remove maintainers from project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerBadRequestException
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerUnauthorizedException
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerForbiddenException
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerNotFoundException
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerConflictException
     * @throws DeleteProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteProjectsByProjectIdRelationshipsMaintainer(string $projectId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteProjectsByProjectIdRelationshipsMaintainer($projectId, $requestBody), $fetch);
    }

    /**
     * Get project maintainer relationships.
     *
     * @param string $projectId       format of composite id should be `o:organization_slug:p:project_slug`
     * @param array  $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectsProjectIdRelationshipsMaintainers200Response|ResponseInterface
     *
     * @throws GetProjectsByProjectIdRelationshipsMaintainerBadRequestException
     * @throws GetProjectsByProjectIdRelationshipsMaintainerUnauthorizedException
     * @throws GetProjectsByProjectIdRelationshipsMaintainerPaymentRequiredException
     * @throws GetProjectsByProjectIdRelationshipsMaintainerForbiddenException
     * @throws GetProjectsByProjectIdRelationshipsMaintainerNotFoundException
     * @throws GetProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectsByProjectIdRelationshipsMaintainer(string $projectId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsByProjectIdRelationshipsMaintainer($projectId, $queryParameters), $fetch);
    }

    /**
     * Completely replace project maintainers.

    _**Warning**: This is a highly destructive operation._.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerBadRequestException
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerUnauthorizedException
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerForbiddenException
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerNotFoundException
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerConflictException
     * @throws PatchProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchProjectsByProjectIdRelationshipsMaintainer(string $projectId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PatchProjectsByProjectIdRelationshipsMaintainer($projectId, $requestBody), $fetch);
    }

    /**
     * Add maintainers to project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PostProjectsByProjectIdRelationshipsMaintainerBadRequestException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerUnauthorizedException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerPaymentRequiredException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerForbiddenException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerNotFoundException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerConflictException
     * @throws PostProjectsByProjectIdRelationshipsMaintainerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postProjectsByProjectIdRelationshipsMaintainer(string $projectId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PostProjectsByProjectIdRelationshipsMaintainer($projectId, $requestBody), $fetch);
    }

    /**
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetProjectsProjectIdRelationshipsTeam200Response|ResponseInterface
     *
     * @throws GetProjectsByProjectIdRelationshipsTeamBadRequestException
     * @throws GetProjectsByProjectIdRelationshipsTeamUnauthorizedException
     * @throws GetProjectsByProjectIdRelationshipsTeamForbiddenException
     * @throws GetProjectsByProjectIdRelationshipsTeamNotFoundException
     * @throws GetProjectsByProjectIdRelationshipsTeamInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getProjectsByProjectIdRelationshipsTeam(string $projectId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsByProjectIdRelationshipsTeam($projectId), $fetch);
    }

    /**
     * Update team relationship to set a new team to the project.
     *
     * @param string $projectId format of composite id should be `o:organization_slug:p:project_slug`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PatchProjectsByProjectIdRelationshipsTeamBadRequestException
     * @throws PatchProjectsByProjectIdRelationshipsTeamUnauthorizedException
     * @throws PatchProjectsByProjectIdRelationshipsTeamForbiddenException
     * @throws PatchProjectsByProjectIdRelationshipsTeamNotFoundException
     * @throws PatchProjectsByProjectIdRelationshipsTeamInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchProjectsByProjectIdRelationshipsTeam(string $projectId, PatchProjectsProjectIdRelationshipsTeamRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PatchProjectsByProjectIdRelationshipsTeam($projectId, $requestBody), $fetch);
    }

    /**
     * The response represents the resource activity report download job. Check.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceActivityReportsAsyncDownloadsResponse|ResponseInterface
     *
     * @throws PostResourceActivityReportsAsyncDownloadBadRequestException
     * @throws PostResourceActivityReportsAsyncDownloadUnauthorizedException
     * @throws PostResourceActivityReportsAsyncDownloadForbiddenException
     * @throws PostResourceActivityReportsAsyncDownloadNotFoundException
     * @throws PostResourceActivityReportsAsyncDownloadConflictException
     * @throws PostResourceActivityReportsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceActivityReportsAsyncDownload(PostResourceActivityReportsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceActivityReportsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an resource.
     *
     * @param string $resourceActivityReportsAsyncDownloadId Format of the resource_activity_reports_async_download_id should be a
     * @param string $fetch                                  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceActivityReportsAsyncDownloadsResponse|ResponseInterface|null
     *
     * @throws GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdUnauthorizedException
     * @throws GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdForbiddenException
     * @throws GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdNotFoundException
     * @throws GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadId(string $resourceActivityReportsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceActivityReportsAsyncDownloadByResourceActivityReportsAsyncDownloadId($resourceActivityReportsAsyncDownloadId), $fetch);
    }

    /**
     * Merge git based branch.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceAsyncMergesResponse|ResponseInterface
     *
     * @throws PostResourceAsyncMergeBadRequestException
     * @throws PostResourceAsyncMergeUnauthorizedException
     * @throws PostResourceAsyncMergeForbiddenException
     * @throws PostResourceAsyncMergeNotFoundException
     * @throws PostResourceAsyncMergeConflictException
     * @throws PostResourceAsyncMergeTooManyRequestsException
     * @throws PostResourceAsyncMergeInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceAsyncMerge(PostResourceAsyncMergesRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceAsyncMerge($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of a resource merge job.

     *
     * @param string $resourceAsyncMergeId format of the resource_async_merge_id should be a UUID
     * @param string $fetch                Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceAsyncMergesResponse|ResponseInterface
     *
     * @throws GetByResourceAsyncMergeIdUnauthorizedException
     * @throws GetByResourceAsyncMergeIdForbiddenException
     * @throws GetByResourceAsyncMergeIdNotFoundException
     * @throws GetByResourceAsyncMergeIdTooManyRequestsException
     * @throws GetByResourceAsyncMergeIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getByResourceAsyncMergeId(string $resourceAsyncMergeId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetByResourceAsyncMergeId($resourceAsyncMergeId), $fetch);
    }

    /**
     * Get the statistics for a set of resources. You must specify at least a project.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[project] Filter results by a project
     *     @var string $filter[resource] Filter results by a resource
     *     @var string $filter[language] Filter results by a language
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.

     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceLanguageStats200Response|ResponseInterface
     *
     * @throws GetResourceLanguageStatBadRequestException
     * @throws GetResourceLanguageStatUnauthorizedException
     * @throws GetResourceLanguageStatNotFoundException
     * @throws GetResourceLanguageStatConflictException
     * @throws GetResourceLanguageStatInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceLanguageStat(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceLanguageStat($queryParameters), $fetch);
    }

    /**
     * Get information for a specific supported language.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceLanguageStatsResourceLanguageStatsId200Response|ResponseInterface
     *
     * @throws GetResourceLanguageStatByResourceLanguageStatsIdBadRequestException
     * @throws GetResourceLanguageStatByResourceLanguageStatsIdUnauthorizedException
     * @throws GetResourceLanguageStatByResourceLanguageStatsIdForbiddenException
     * @throws GetResourceLanguageStatByResourceLanguageStatsIdNotFoundException
     * @throws GetResourceLanguageStatByResourceLanguageStatsIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceLanguageStatByResourceLanguageStatsId(string $resourceLanguageStatsId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceLanguageStatByResourceLanguageStatsId($resourceLanguageStatsId), $fetch);
    }

    /**
     * Get a list of all resource string comments for an organization. You can further narrow down the list using the available filters.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $filter[project] Filter results by a project
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[category]
     *     @var string $filter[author]
     *     @var string $filter[datetime_created][gte]
     *     @var string $filter[datetime_created][lt]
     *     @var string $filter[priority]
     *     @var string $filter[resource]
     *     @var string $filter[resource_string]
     *     @var string $filter[status]
     *     @var string $filter[type]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceStringComments200Response|ResponseInterface
     *
     * @throws GetResourceStringCommentBadRequestException
     * @throws GetResourceStringCommentUnauthorizedException
     * @throws GetResourceStringCommentNotFoundException
     * @throws GetResourceStringCommentInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringComment(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringComment($queryParameters), $fetch);
    }

    /**
     * Create a new resource string comment. This needs to be associated with a resource string and a target language.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PostResourceStringComments201Response|ResponseInterface
     *
     * @throws PostResourceStringCommentBadRequestException
     * @throws PostResourceStringCommentUnauthorizedException
     * @throws PostResourceStringCommentForbiddenException
     * @throws PostResourceStringCommentNotFoundException
     * @throws PostResourceStringCommentConflictException
     * @throws PostResourceStringCommentInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceStringComment(PostResourceStringCommentsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceStringComment($requestBody), $fetch);
    }

    /**
     * Delete a resource string comment.
     *
     * @param string $commentId format of the command_id should be a `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash:c:comment_hash`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteResourceStringCommentByCommentIdUnauthorizedException
     * @throws DeleteResourceStringCommentByCommentIdForbiddenException
     * @throws DeleteResourceStringCommentByCommentIdNotFoundException
     * @throws DeleteResourceStringCommentByCommentIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteResourceStringCommentByCommentId(string $commentId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteResourceStringCommentByCommentId($commentId), $fetch);
    }

    /**
     * Get details for a comment related to a specific resource string.
     *
     * @param string $commentId format of the command_id should be a `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash:c:comment_hash`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceStringCommentsCommentId200Response|ResponseInterface
     *
     * @throws GetResourceStringCommentByCommentIdUnauthorizedException
     * @throws GetResourceStringCommentByCommentIdNotFoundException
     * @throws GetResourceStringCommentByCommentIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringCommentByCommentId(string $commentId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringCommentByCommentId($commentId), $fetch);
    }

    /**
     * Change a resource string comment. You can update it's status, change it to an issue or edit the description.
     *
     * @param string $commentId format of the command_id should be a `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash:c:comment_hash`
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PatchResourceStringCommentsCommentId200Response|ResponseInterface
     *
     * @throws PatchResourceStringCommentByCommentIdBadRequestException
     * @throws PatchResourceStringCommentByCommentIdUnauthorizedException
     * @throws PatchResourceStringCommentByCommentIdForbiddenException
     * @throws PatchResourceStringCommentByCommentIdNotFoundException
     * @throws PatchResourceStringCommentByCommentIdConflictException
     * @throws PatchResourceStringCommentByCommentIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceStringCommentByCommentId(string $commentId, PatchResourceStringCommentsCommentIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchResourceStringCommentByCommentId($commentId, $requestBody), $fetch);
    }

    /**
     * Include a payload with resource identifiers to all resource strings you.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteResourceStringTooManyRequestsException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteResourceString(DeleteResourceStringsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteResourceString($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     *     @var string $filter[resource] Filter results by a resource
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[strings_date_modified][gte]
     *     @var string $filter[strings_date_modified][lte]
     *     @var string $filter[key] Exact match for the key of the resource string. This filter is case sensitive.
     *     @var array $filter[tags][all] Retrieve source strings containing all of the query tags
     *     @var string $limit The page size limit. If not set, the default value is 150. <br> If set, the minimum value it can take is 150 and the maximum 1000.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceStrings200Response|ResponseInterface
     *
     * @throws GetResourceStringBadRequestException
     * @throws GetResourceStringUnauthorizedException
     * @throws GetResourceStringForbiddenException
     * @throws GetResourceStringNotFoundException
     * @throws GetResourceStringConflictException
     * @throws GetResourceStringTooManyRequestsException
     * @throws GetResourceStringInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceString(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceString($queryParameters), $fetch);
    }

    /**
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/vnd.api+json;profile="bulk"|application/vnd.api+json
     *
     * @throws PatchResourceStringBadRequestException
     * @throws PatchResourceStringUnauthorizedException
     * @throws PatchResourceStringForbiddenException
     * @throws PatchResourceStringNotFoundException
     * @throws PatchResourceStringConflictException
     * @throws PatchResourceStringInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceString(PatchResourceStringsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT, array $accept = []): ResponseInterface
    {
        return $this->executeEndpoint(new PatchResourceString($requestBody, $accept), $fetch);
    }

    /**
     * Create a new resource string. This path is valid only for file-less.
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/vnd.api+json|application/vnd.api+json;profile="bulk"
     *
     * @return PostResourceStrings201Response|ResponseInterface
     *
     * @throws PostResourceStringBadRequestException
     * @throws PostResourceStringUnauthorizedException
     * @throws PostResourceStringForbiddenException
     * @throws PostResourceStringNotFoundException
     * @throws PostResourceStringConflictException
     * @throws PostResourceStringTooManyRequestsException
     * @throws PostResourceStringInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceString(PostResourceStringsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new PostResourceString($requestBody, $accept), $fetch);
    }

    /**
     * Delete a resource string.

     *
     * @param string $resourceStringId format of the Resource String id should be `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash`
     * @param string $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteResourceStringByResourceStringIdUnauthorizedException
     * @throws DeleteResourceStringByResourceStringIdForbiddenException
     * @throws DeleteResourceStringByResourceStringIdNotFoundException
     * @throws DeleteResourceStringByResourceStringIdConflictException
     * @throws DeleteResourceStringByResourceStringIdTooManyRequestsException
     * @throws DeleteResourceStringByResourceStringIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteResourceStringByResourceStringId(string $resourceStringId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteResourceStringByResourceStringId($resourceStringId), $fetch);
    }

    /**
     * Get the details of a specific resource string.
     *
     * @param string $resourceStringId format of the Resource String id should be `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash`
     * @param string $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsResourceStringIdResponse|ResponseInterface
     *
     * @throws GetResourceStringByResourceStringIdUnauthorizedException
     * @throws GetResourceStringByResourceStringIdForbiddenException
     * @throws GetResourceStringByResourceStringIdNotFoundException
     * @throws GetResourceStringByResourceStringIdTooManyRequestsException
     * @throws GetResourceStringByResourceStringIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringByResourceStringId(string $resourceStringId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringByResourceStringId($resourceStringId), $fetch);
    }

    /**
     * @param string $resourceStringId format of the Resource String id should be `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash`
     * @param string $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsResourceStringIdResponse|ResponseInterface
     *
     * @throws PatchResourceStringByResourceStringIdBadRequestException
     * @throws PatchResourceStringByResourceStringIdUnauthorizedException
     * @throws PatchResourceStringByResourceStringIdForbiddenException
     * @throws PatchResourceStringByResourceStringIdNotFoundException
     * @throws PatchResourceStringByResourceStringIdConflictException
     * @throws PatchResourceStringByResourceStringIdTooManyRequestsException
     * @throws PatchResourceStringByResourceStringIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceStringByResourceStringId(string $resourceStringId, PatchResourceStringsResourceStringIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchResourceStringByResourceStringId($resourceStringId, $requestBody), $fetch);
    }

    /**
     * The response represents the file download job. Check the job's status.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsAsyncDownloadsResponse|ResponseInterface
     *
     * @throws PostResourceStringsAsyncDownloadBadRequestException
     * @throws PostResourceStringsAsyncDownloadUnauthorizedException
     * @throws PostResourceStringsAsyncDownloadForbiddenException
     * @throws PostResourceStringsAsyncDownloadNotFoundException
     * @throws PostResourceStringsAsyncDownloadConflictException
     * @throws PostResourceStringsAsyncDownloadTooManyRequestsException
     * @throws PostResourceStringsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceStringsAsyncDownload(PostResourceStringsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceStringsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of a resource strings download job.

     *
     * @param string $resourceStringsAsyncDownloadId format of the resource_strings_async_download_id should be `o:organization_slug:p:project_slug:r:resource_slug`
     * @param string $fetch                          Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsAsyncDownloadsResponse|ResponseInterface|null
     *
     * @throws GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdUnauthorizedException
     * @throws GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdForbiddenException
     * @throws GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdNotFoundException
     * @throws GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdTooManyRequestsException
     * @throws GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringsAsyncDownloadByResourceStringsAsyncDownloadId(string $resourceStringsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringsAsyncDownloadByResourceStringsAsyncDownloadId($resourceStringsAsyncDownloadId), $fetch);
    }

    /**
     * For more details about File uploads you can refer to [File Uploads](#section/File-Uploads) section.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsAsyncUploadsResponse|ResponseInterface
     *
     * @throws PostResourceStringsAsyncUploadBadRequestException
     * @throws PostResourceStringsAsyncUploadUnauthorizedException
     * @throws PostResourceStringsAsyncUploadForbiddenException
     * @throws PostResourceStringsAsyncUploadNotFoundException
     * @throws PostResourceStringsAsyncUploadConflictException
     * @throws PostResourceStringsAsyncUploadTooManyRequestsException
     * @throws PostResourceStringsAsyncUploadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceStringsAsyncUpload(PostResourceStringsAsyncUploadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceStringsAsyncUpload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of a source upload job.

     *
     * @param string $resourceStringsAsyncUploadId format of the resource_strings_async_upload_id should be a UUID
     * @param string $fetch                        Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceStringsAsyncUploadsResponse|ResponseInterface
     *
     * @throws GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdUnauthorizedException
     * @throws GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdForbiddenException
     * @throws GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdNotFoundException
     * @throws GetResourceStringsAsyncUploadByResourceStringsAsyncUploadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringsAsyncUploadByResourceStringsAsyncUploadId(string $resourceStringsAsyncUploadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringsAsyncUploadByResourceStringsAsyncUploadId($resourceStringsAsyncUploadId), $fetch);
    }

    /**
     * Get revisions of resource strings.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[resource_string][resource] Filter results by a resource
     *     @var string $filter[resource_string][key] Exact match for the key of the resource string. This filter is case sensitive.
     *     @var array $filter[resource_string][tags][all] Retrieve source strings revisions containing all of the query tags
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $limit The page size limit. If not set, the default value is 150. <br> If set, the minimum value it can take is 150 and the maximum 1000.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceStringsRevisions200Response|ResponseInterface
     *
     * @throws GetResourceStringsRevisionBadRequestException
     * @throws GetResourceStringsRevisionUnauthorizedException
     * @throws GetResourceStringsRevisionForbiddenException
     * @throws GetResourceStringsRevisionNotFoundException
     * @throws GetResourceStringsRevisionTooManyRequestsException
     * @throws GetResourceStringsRevisionInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceStringsRevision(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceStringsRevision($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     *     @var string $filter[resource] Filter results by a resource
     *     @var string $filter[language] Filter results by a language
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[date_translated][gt]
     *     @var string $filter[date_translated][lt]
     *     @var string $filter[resource_string][key]
     *     @var string $filter[resource_string][date_modified][gte]
     *     @var string $filter[resource_string][date_modified][lte]
     *     @var bool $filter[translated]
     *     @var bool $filter[reviewed]
     *     @var bool $filter[proofread]
     *     @var bool $filter[finalized]
     *     @var string $filter[translator]
     *     @var string $include use the value `resource_string` to get the list of resource string objects in the response
     *     @var array $filter[resource_string][tags][all] Retrieve translation strings containing all of the query tags
     *     @var string $limit The page size limit. If not set, the default value is 150. <br> If set, the minimum value it can take is 150 and the maximum 1000.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceTranslations200Response|ResponseInterface
     *
     * @throws GetResourceTranslationBadRequestException
     * @throws GetResourceTranslationUnauthorizedException
     * @throws GetResourceTranslationForbiddenException
     * @throws GetResourceTranslationNotFoundException
     * @throws GetResourceTranslationConflictException
     * @throws GetResourceTranslationTooManyRequestsException
     * @throws GetResourceTranslationInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceTranslation(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceTranslation($queryParameters), $fetch);
    }

    /**
     * Allows for bulk updating of translations up to 150 at a time.
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/vnd.api+json;profile="bulk"|application/vnd.api+json
     *
     * @throws PatchResourceTranslationBadRequestException
     * @throws PatchResourceTranslationUnauthorizedException
     * @throws PatchResourceTranslationForbiddenException
     * @throws PatchResourceTranslationNotFoundException
     * @throws PatchResourceTranslationConflictException
     * @throws PatchResourceTranslationTooManyRequestsException
     * @throws PatchResourceTranslationInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceTranslation(PatchResourceTranslationsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT, array $accept = []): ResponseInterface
    {
        return $this->executeEndpoint(new PatchResourceTranslation($requestBody, $accept), $fetch);
    }

    /**
     * @param string $resourceTranslationId Format of the Resource Translation id. Should be `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash:l:language_code`.
     * @param array  $queryParameters       {
     *
     *     @var string $include Use the value `resource_string` to get the list of resource string objects in the response.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResourceTranslationsResourceTranslationId200Response|ResponseInterface
     *
     * @throws GetResourceTranslationByResourceTranslationIdUnauthorizedException
     * @throws GetResourceTranslationByResourceTranslationIdForbiddenException
     * @throws GetResourceTranslationByResourceTranslationIdNotFoundException
     * @throws GetResourceTranslationByResourceTranslationIdTooManyRequestsException
     * @throws GetResourceTranslationByResourceTranslationIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceTranslationByResourceTranslationId(string $resourceTranslationId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceTranslationByResourceTranslationId($resourceTranslationId, $queryParameters), $fetch);
    }

    /**
     * Allows to add/update/remove content for Resource Translations as well as.
     *
     * @param string $resourceTranslationId Format of the Resource Translation id. Should be `o:organization_slug:p:project_slug:r:resource_slug:s:string_hash:l:language_code`.
     * @param string $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PatchResourceTranslationsResourceTranslationId200Response|ResponseInterface
     *
     * @throws PatchResourceTranslationByResourceTranslationIdBadRequestException
     * @throws PatchResourceTranslationByResourceTranslationIdUnauthorizedException
     * @throws PatchResourceTranslationByResourceTranslationIdForbiddenException
     * @throws PatchResourceTranslationByResourceTranslationIdNotFoundException
     * @throws PatchResourceTranslationByResourceTranslationIdConflictException
     * @throws PatchResourceTranslationByResourceTranslationIdTooManyRequestsException
     * @throws PatchResourceTranslationByResourceTranslationIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceTranslationByResourceTranslationId(string $resourceTranslationId, PatchResourceTranslationsResourceTranslationIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchResourceTranslationByResourceTranslationId($resourceTranslationId, $requestBody), $fetch);
    }

    /**
     * The response represents the file download job. Check the job's status.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceTranslationsAsyncDownloadsResponse|ResponseInterface
     *
     * @throws PostResourceTranslationsAsyncDownloadBadRequestException
     * @throws PostResourceTranslationsAsyncDownloadUnauthorizedException
     * @throws PostResourceTranslationsAsyncDownloadForbiddenException
     * @throws PostResourceTranslationsAsyncDownloadNotFoundException
     * @throws PostResourceTranslationsAsyncDownloadConflictException
     * @throws PostResourceTranslationsAsyncDownloadTooManyRequestsException
     * @throws PostResourceTranslationsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceTranslationsAsyncDownload(PostResourceTranslationsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceTranslationsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an translation download job.

     *
     * @param string $resourceTranslationsAsyncDownloadId format of the resource_translations_async_download_id should be a UUID
     * @param string $fetch                               Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceTranslationsAsyncDownloadsResponse|ResponseInterface|null
     *
     * @throws GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdUnauthorizedException
     * @throws GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdForbiddenException
     * @throws GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdNotFoundException
     * @throws GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdTooManyRequestsException
     * @throws GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadId(string $resourceTranslationsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceTranslationsAsyncDownloadByResourceTranslationsAsyncDownloadId($resourceTranslationsAsyncDownloadId), $fetch);
    }

    /**
     * Upload a new resource translation file for a specific language.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceTranslationsAsyncUploadsResponse|ResponseInterface
     *
     * @throws PostResourceTranslationsAsyncUploadBadRequestException
     * @throws PostResourceTranslationsAsyncUploadUnauthorizedException
     * @throws PostResourceTranslationsAsyncUploadForbiddenException
     * @throws PostResourceTranslationsAsyncUploadNotFoundException
     * @throws PostResourceTranslationsAsyncUploadConflictException
     * @throws PostResourceTranslationsAsyncUploadTooManyRequestsException
     * @throws PostResourceTranslationsAsyncUploadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResourceTranslationsAsyncUpload(PostResourceTranslationsAsyncUploadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResourceTranslationsAsyncUpload($requestBody), $fetch);
    }

    /**
     * Get details of a resource translations upload.
     *
     * @param string $resourceTranslationsAsyncUploadId format of the resource_translations_async_upload_id should be a UUID
     * @param string $fetch                             Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourceTranslationsAsyncUploadsResponse|ResponseInterface
     *
     * @throws GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdBadRequestException
     * @throws GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdUnauthorizedException
     * @throws GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdForbiddenException
     * @throws GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdNotFoundException
     * @throws GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadId(string $resourceTranslationsAsyncUploadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceTranslationsAsyncUploadByResourceTranslationsAsyncUploadId($resourceTranslationsAsyncUploadId), $fetch);
    }

    /**
     * Get a list of all resources (in a specific project).
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[project] Filter results by a project
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[slug]
     *     @var string $filter[name]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetResources200Response|ResponseInterface
     *
     * @throws GetResourceBadRequestException
     * @throws GetResourceUnauthorizedException
     * @throws GetResourceForbiddenException
     * @throws GetResourceConflictException
     * @throws GetResourceInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResource(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResource($queryParameters), $fetch);
    }

    /**
     * Making a POST request to this endpoint creates a resource without content.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourcesResponse1|ResponseInterface
     *
     * @throws PostResourceBadRequestException
     * @throws PostResourceUnauthorizedException
     * @throws PostResourceForbiddenException
     * @throws PostResourceNotFoundException
     * @throws PostResourceConflictException
     * @throws PostResourceInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postResource(PostResourcesRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostResource($requestBody), $fetch);
    }

    /**
     * Delete a resource of a project.
     *
     * @param string $resourceId format of composite id should be `o:organization_slug:p:project_slug:r:resource_slug`
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteResourceByResourceIdUnauthorizedException
     * @throws DeleteResourceByResourceIdForbiddenException
     * @throws DeleteResourceByResourceIdNotFoundException
     * @throws DeleteResourceByResourceIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteResourceByResourceId(string $resourceId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteResourceByResourceId($resourceId), $fetch);
    }

    /**
     * Get details of a specific resource.
     *
     * @param string $resourceId format of composite id should be `o:organization_slug:p:project_slug:r:resource_slug`
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourcesResponse1|ResponseInterface
     *
     * @throws GetResourceByResourceIdUnauthorizedException
     * @throws GetResourceByResourceIdForbiddenException
     * @throws GetResourceByResourceIdNotFoundException
     * @throws GetResourceByResourceIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getResourceByResourceId(string $resourceId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetResourceByResourceId($resourceId), $fetch);
    }

    /**
     * Update details of a resource.
     *
     * @param string $resourceId format of composite id should be `o:organization_slug:p:project_slug:r:resource_slug`
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResourcesResponse|ResponseInterface
     *
     * @throws PatchResourceByResourceIdBadRequestException
     * @throws PatchResourceByResourceIdUnauthorizedException
     * @throws PatchResourceByResourceIdForbiddenException
     * @throws PatchResourceByResourceIdNotFoundException
     * @throws PatchResourceByResourceIdConflictException
     * @throws PatchResourceByResourceIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchResourceByResourceId(string $resourceId, PatchResourcesResourceIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchResourceByResourceId($resourceId, $requestBody), $fetch);
    }

    /**
     * The response represents the team activity report file download job.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamActivityReportsAsyncDownloadsResponse
     *
     * @throws PostTeamActivityReportsAsyncDownloadBadRequestException
     * @throws PostTeamActivityReportsAsyncDownloadUnauthorizedException
     * @throws PostTeamActivityReportsAsyncDownloadForbiddenException
     * @throws PostTeamActivityReportsAsyncDownloadNotFoundException
     * @throws PostTeamActivityReportsAsyncDownloadConflictException
     * @throws PostTeamActivityReportsAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postTeamActivityReportsAsyncDownload(PostTeamActivityReportsAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTeamActivityReportsAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an team.
     *
     * @param string $teamActivityReportsAsyncDownloadId Format of the team_activity_reports_async_download_id should be
     * @param string $fetch                              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamActivityReportsAsyncDownloadsResponse|null
     *
     * @throws GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdUnauthorizedException
     * @throws GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdForbiddenException
     * @throws GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdNotFoundException
     * @throws GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadId(string $teamActivityReportsAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamActivityReportsAsyncDownloadByTeamActivityReportsAsyncDownloadId($teamActivityReportsAsyncDownloadId), $fetch);
    }

    /**
     * List team memberships.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $filter[team] Filter results by a team
     *     @var string $filter[language] Filter results by a language
     *     @var string $filter[user] Filter results by a user
     *     @var string $filter[role] Filter results by role
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $include
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTeamMemberships200Response|ResponseInterface
     *
     * @throws GetTeamMembershipBadRequestException
     * @throws GetTeamMembershipUnauthorizedException
     * @throws GetTeamMembershipForbiddenException
     * @throws GetTeamMembershipNotFoundException
     * @throws GetTeamMembershipInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamMembership(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamMembership($queryParameters), $fetch);
    }

    /**
     * Create a new team membership.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamMembershipsResponse
     *
     * @throws PostTeamMembershipBadRequestException
     * @throws PostTeamMembershipUnauthorizedException
     * @throws PostTeamMembershipPaymentRequiredException
     * @throws PostTeamMembershipForbiddenException
     * @throws PostTeamMembershipNotFoundException
     * @throws PostTeamMembershipConflictException
     * @throws PostTeamMembershipInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postTeamMembership(PostTeamMembershipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTeamMembership($requestBody), $fetch);
    }

    /**
     * Delete team membership.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteTeamMembershipByTeamMembershipIdBadRequestException
     * @throws DeleteTeamMembershipByTeamMembershipIdUnauthorizedException
     * @throws DeleteTeamMembershipByTeamMembershipIdForbiddenException
     * @throws DeleteTeamMembershipByTeamMembershipIdNotFoundException
     * @throws DeleteTeamMembershipByTeamMembershipIdConflictException
     * @throws DeleteTeamMembershipByTeamMembershipIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteTeamMembershipByTeamMembershipId(string $teamMembershipId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteTeamMembershipByTeamMembershipId($teamMembershipId), $fetch);
    }

    /**
     * Get single team membership.
     *
     * @param array $queryParameters {
     *
     *     @var string $include
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTeamMembershipsTeamMembershipId200Response|ResponseInterface
     *
     * @throws GetTeamMembershipByTeamMembershipIdBadRequestException
     * @throws GetTeamMembershipByTeamMembershipIdUnauthorizedException
     * @throws GetTeamMembershipByTeamMembershipIdForbiddenException
     * @throws GetTeamMembershipByTeamMembershipIdNotFoundException
     * @throws GetTeamMembershipByTeamMembershipIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamMembershipByTeamMembershipId(string $teamMembershipId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamMembershipByTeamMembershipId($teamMembershipId, $queryParameters), $fetch);
    }

    /**
     * Update a membership's role.

     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamMembershipsResponse
     *
     * @throws PatchTeamMembershipByTeamMembershipIdBadRequestException
     * @throws PatchTeamMembershipByTeamMembershipIdUnauthorizedException
     * @throws PatchTeamMembershipByTeamMembershipIdForbiddenException
     * @throws PatchTeamMembershipByTeamMembershipIdNotFoundException
     * @throws PatchTeamMembershipByTeamMembershipIdConflictException
     * @throws PatchTeamMembershipByTeamMembershipIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchTeamMembershipByTeamMembershipId(string $teamMembershipId, PatchTeamMembershipsTeamMembershipIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchTeamMembershipByTeamMembershipId($teamMembershipId, $requestBody), $fetch);
    }

    /**
     * Get the list of teams that belong to a single organization.
     *
     * @param array $queryParameters {
     *
     *     @var string $filter[organization] Filter results by an organization
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     *     @var string $filter[slug] The slug of the team to get details
     *     @var string $filter[name]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTeams200Response|ResponseInterface
     *
     * @throws GetTeamBadRequestException
     * @throws GetTeamUnauthorizedException
     * @throws GetTeamForbiddenException
     * @throws GetTeamNotFoundException
     * @throws GetTeamInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeam(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeam($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamsResponse
     *
     * @throws PostTeamBadRequestException
     * @throws PostTeamForbiddenException
     * @throws PostTeamNotFoundException
     * @throws PostTeamConflictException
     * @throws UnexpectedStatusCodeException
     */
    public function postTeam(PostTeamsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTeam($requestBody), $fetch);
    }

    /**
     * Delete a team.
     *
     * @param string $teamId format of composite id should be `o:organization_slug:t:team_slug`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteTeamByTeamIdUnauthorizedException
     * @throws DeleteTeamByTeamIdForbiddenException
     * @throws DeleteTeamByTeamIdNotFoundException
     * @throws DeleteTeamByTeamIdConflictException
     * @throws DeleteTeamByTeamIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteTeamByTeamId(string $teamId, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteTeamByTeamId($teamId), $fetch);
    }

    /**
     * Get the details of a single team.
     *
     * @param string $teamId format of composite id should be `o:organization_slug:t:team_slug`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TeamsResponse
     *
     * @throws GetTeamByTeamIdBadRequestException
     * @throws GetTeamByTeamIdUnauthorizedException
     * @throws GetTeamByTeamIdForbiddenException
     * @throws GetTeamByTeamIdNotFoundException
     * @throws GetTeamByTeamIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamByTeamId(string $teamId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamByTeamId($teamId), $fetch);
    }

    /**
     * @param string $teamId format of composite id should be `o:organization_slug:t:team_slug`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PatchTeamsTeamId200Response|ResponseInterface
     *
     * @throws PatchTeamByTeamIdBadRequestException
     * @throws PatchTeamByTeamIdUnauthorizedException
     * @throws PatchTeamByTeamIdForbiddenException
     * @throws PatchTeamByTeamIdNotFoundException
     * @throws PatchTeamByTeamIdConflictException
     * @throws PatchTeamByTeamIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchTeamByTeamId(string $teamId, PatchTeamsTeamIdRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PatchTeamByTeamId($teamId, $requestBody), $fetch);
    }

    /**
     * Get the managers of a team.
     *
     * @param string $teamId          format of composite id should be `o:organization_slug:t:team_slug`
     * @param array  $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTeamsTeamIdManagers200Response|ResponseInterface
     *
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamsByTeamIdManager(string $teamId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamsByTeamIdManager($teamId, $queryParameters), $fetch);
    }

    /**
     * Remove managers from team.
     *
     * @param string $teamId format of composite id should be `o:organization_slug:t:team_slug`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws DeleteTeamsByTeamIdRelationshipsManagerBadRequestException
     * @throws DeleteTeamsByTeamIdRelationshipsManagerUnauthorizedException
     * @throws DeleteTeamsByTeamIdRelationshipsManagerForbiddenException
     * @throws DeleteTeamsByTeamIdRelationshipsManagerNotFoundException
     * @throws DeleteTeamsByTeamIdRelationshipsManagerConflictException
     * @throws DeleteTeamsByTeamIdRelationshipsManagerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function deleteTeamsByTeamIdRelationshipsManager(string $teamId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new DeleteTeamsByTeamIdRelationshipsManager($teamId, $requestBody), $fetch);
    }

    /**
     * Get team manager relationships.
     *
     * @param string $teamId          format of composite id should be `o:organization_slug:t:team_slug`
     * @param array  $queryParameters {
     *
     *     @var string $page[cursor] The cursor used for pagination. The value of the cursor must be retrieved from pagination links included in previous responses; you should not attempt to write them on your own.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTeamsTeamIdRelationshipsManagers200Response|ResponseInterface
     *
     * @throws GetTeamsByTeamIdRelationshipsManagerBadRequestException
     * @throws GetTeamsByTeamIdRelationshipsManagerUnauthorizedException
     * @throws GetTeamsByTeamIdRelationshipsManagerForbiddenException
     * @throws GetTeamsByTeamIdRelationshipsManagerNotFoundException
     * @throws GetTeamsByTeamIdRelationshipsManagerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTeamsByTeamIdRelationshipsManager(string $teamId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTeamsByTeamIdRelationshipsManager($teamId, $queryParameters), $fetch);
    }

    /**
     * Completely replace team managers.

    _**Warning**: This is a highly destructive operation._.
     *
     * @param string $teamId Format of composite id should be `o:organization_slug:t:team_slug`.
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PatchTeamsByTeamIdRelationshipsManagerBadRequestException
     * @throws PatchTeamsByTeamIdRelationshipsManagerUnauthorizedException
     * @throws PatchTeamsByTeamIdRelationshipsManagerPaymentRequiredException
     * @throws PatchTeamsByTeamIdRelationshipsManagerForbiddenException
     * @throws PatchTeamsByTeamIdRelationshipsManagerNotFoundException
     * @throws PatchTeamsByTeamIdRelationshipsManagerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function patchTeamsByTeamIdRelationshipsManager(string $teamId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PatchTeamsByTeamIdRelationshipsManager($teamId, $requestBody), $fetch);
    }

    /**
     * Add managers to team.
     *
     * @param string $teamId format of composite id should be `o:organization_slug:t:team_slug`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws PostTeamsByTeamIdRelationshipsManagerBadRequestException
     * @throws PostTeamsByTeamIdRelationshipsManagerUnauthorizedException
     * @throws PostTeamsByTeamIdRelationshipsManagerPaymentRequiredException
     * @throws PostTeamsByTeamIdRelationshipsManagerForbiddenException
     * @throws PostTeamsByTeamIdRelationshipsManagerNotFoundException
     * @throws PostTeamsByTeamIdRelationshipsManagerConflictException
     * @throws PostTeamsByTeamIdRelationshipsManagerInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postTeamsByTeamIdRelationshipsManager(string $teamId, IdRelationshipsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT): ?ResponseInterface
    {
        return $this->executeEndpoint(new PostTeamsByTeamIdRelationshipsManager($teamId, $requestBody), $fetch);
    }

    /**
     * The response represents the file download job. Check the job's status.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TmxAsyncDownloadsResponse
     *
     * @throws PostTmxAsyncDownloadBadRequestException
     * @throws PostTmxAsyncDownloadUnauthorizedException
     * @throws PostTmxAsyncDownloadForbiddenException
     * @throws PostTmxAsyncDownloadNotFoundException
     * @throws PostTmxAsyncDownloadConflictException
     * @throws PostTmxAsyncDownloadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postTmxAsyncDownload(PostTmxAsyncDownloadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTmxAsyncDownload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an tmx file download job.

     *
     * @param string $tmxAsyncDownloadId format of the tmx_async_download_id should be a UUID
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return ResponseInterface|TmxAsyncDownloadsResponse|null
     *
     * @throws GetTmxAsyncDownloadByTmxAsyncDownloadIdUnauthorizedException
     * @throws GetTmxAsyncDownloadByTmxAsyncDownloadIdForbiddenException
     * @throws GetTmxAsyncDownloadByTmxAsyncDownloadIdNotFoundException
     * @throws GetTmxAsyncDownloadByTmxAsyncDownloadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTmxAsyncDownloadByTmxAsyncDownloadId(string $tmxAsyncDownloadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTmxAsyncDownloadByTmxAsyncDownloadId($tmxAsyncDownloadId), $fetch);
    }

    /**
     * Upload a new TMX file for a project.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return PostTmxAsyncUploads202Response|ResponseInterface
     *
     * @throws PostTmxAsyncUploadBadRequestException
     * @throws PostTmxAsyncUploadUnauthorizedException
     * @throws PostTmxAsyncUploadForbiddenException
     * @throws PostTmxAsyncUploadNotFoundException
     * @throws PostTmxAsyncUploadConflictException
     * @throws PostTmxAsyncUploadInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function postTmxAsyncUpload(PostTmxAsyncUploadsRequestBody $requestBody, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTmxAsyncUpload($requestBody), $fetch);
    }

    /**
     * With this endpoint, you can inquire about the status of an tmx file upload job.

     *
     * @param string $tmxAsyncUploadId format of the tmx_async_upload_id should be a UUID
     * @param string $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetTmxAsyncUploadsTmxAsyncUploadId200Response|ResponseInterface
     *
     * @throws GetTmxAsyncUploadByTmxAsyncUploadIdUnauthorizedException
     * @throws GetTmxAsyncUploadByTmxAsyncUploadIdForbiddenException
     * @throws GetTmxAsyncUploadByTmxAsyncUploadIdNotFoundException
     * @throws GetTmxAsyncUploadByTmxAsyncUploadIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getTmxAsyncUploadByTmxAsyncUploadId(string $tmxAsyncUploadId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTmxAsyncUploadByTmxAsyncUploadId($tmxAsyncUploadId), $fetch);
    }

    /**
     * Get the details of the user specified by the required path parameter `user_id`.
     *
     * @param string $userId format of the user id should be `u:username`
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return GetUsersUserId200Response|ResponseInterface
     *
     * @throws GetUserByUserIdUnauthorizedException
     * @throws GetUserByUserIdNotFoundException
     * @throws GetUserByUserIdInternalServerErrorException
     * @throws UnexpectedStatusCodeException
     */
    public function getUserByUserId(string $userId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetUserByUserId($userId), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = Psr17FactoryDiscovery::findUrlFactory()->createUri('https://rest.api.transifex.com');
            $plugins[] = new AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new PluginClient($httpClient, $plugins);
        }
        $requestFactory = Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new ArrayDenormalizer(), new JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new Serializer($normalizers, [new JsonEncoder(new JsonEncode(), new JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
